'''Train a simple deep CNN on the CIFAR10 small images dataset.

GPU run command:
    THEANO_FLAGS=mode=FAST_RUN,device=gpu,floatX=float32 python cifar10_cnn.py

It gets down to 0.65 test logloss in 25 epochs, and down to 0.55 after 50 epochs.
(it's still underfitting at that point, though).

Note: the data was pickled with Python 2, and some encoding issues might prevent you
from loading it in Python 3. You might have to load it in Python 2,
save it in a different format, load it in Python 3 and repickle it.
'''

# from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.utils import np_utils
from sklearn.cross_validation import StratifiedKFold
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from keras.models import Sequential
import keras.callbacks
import numpy as np
import pandas as pd
import json
import random
import math
from data_model import load_data, prelu_model
import customcb

batch_size = 1024
nb_classes = 10
nb_epoch = 200
data_augmentation = True

# images are RGB
img_channels = 3
img_size = 32
random.seed(1729)

X_train, X_test, Y_train, Y_test = load_data(img_size)

folds = StratifiedKFold(Y_train, n_folds=4, shuffle=True)

jc = 0
Y_train = np.array(Y_train)
for train, test in folds:
    jc = jc+1
    x_train = X_train[train]
    y_train = Y_train[train]
    x_test = X_train[test]
    y_test = Y_train[test]

    y_train = np_utils.to_categorical(y_train, nb_classes)
    y_test_cat = np_utils.to_categorical(y_test, nb_classes)

    img_dim = x_train.shape[1:]
    model = prelu_model(img_dim, nb_classes)

    x_train = x_train.astype('float32')
    x_test = x_test.astype('float32')
    x_train /= 255
    x_test /= 255

    if not data_augmentation:
        print('Not using data augmentation.')
        model.fit(x_train, y_train,
                  batch_size=batch_size,
                  nb_epoch=nb_epoch,
                  validation_data=(x_test, y_test),
                  shuffle=True)
    else:
        print('Using real-time data augmentation.')

        # this will do preprocessing and realtime data augmentation
        datagen = ImageDataGenerator(
            featurewise_center=False,  # set input mean to 0 over the dataset
            samplewise_center=False,  # set each sample mean to 0
            featurewise_std_normalization=False,  # divide inputs by std of the dataset
            samplewise_std_normalization=False,  # divide each input by its std
            zca_whitening=False,  # apply ZCA whitening
            rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)
            width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
            height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
            horizontal_flip=True,  # randomly flip images
            vertical_flip=False,
            shear_range=0.,
            zoom_range=0.,
            channel_shift_range=0.,
            rescale=None)  # randomly flip images

        # compute quantities required for featurewise normalization
        # (std, mean, and principal components if ZCA whitening is applied)
        datagen.fit(x_train)

        checkpointer = customcb.SaveBestModel(filepath="../results/prelu_customcb_weights"+"_cv_"+str(jc)+".hdf5",
            verbose=1, thresh=0.008)

        # fit the model on the batches generated by datagen.flow()
        k = model.fit_generator(datagen.flow(x_train, y_train,
                            batch_size=batch_size),
                            samples_per_epoch=x_train.shape[0],
                            nb_epoch=nb_epoch,
                            validation_data=(x_test,y_test_cat),
                            verbose=2, callbacks=[checkpointer])
        # tr_acc = k.history["acc"]
        # val_acc = k.history["val_acc"]
        del checkpointer
        print k.history
        model.load_weights("../results/prelu_customcb_weights"+"_cv_"+str(jc)+".hdf5")
        y_pred = model.predict_classes(x_test)
        print accuracy_score(y_test, y_pred), precision_score(y_test, y_pred, average='micro'), recall_score(y_test, y_pred, average='micro'), f1_score(y_test, y_pred, average='micro')
        # model.save_weights('../results/run_prelu_'+'cv_'+str(jc) + '_weights')

with open('../results/run_prelu_arch.txt','w') as outfile:
    json.dump(model.to_json(), outfile)
